#CLPSO-H
gen=200;             #The number of iterations.
tar=readdata('data_double_peak.txt'); 
popcen=[80,80,80,80,80];
popmin=[15,15,15,15,15];         
popmax=[150,150,150,150,150];
M=5;
vmax=0.2*(popmax-popmin);
vmin=-1*vmax;
result=matrix(1,gen);
GLOBALBEST=matrix(1,M);
# initialize the swarm of CPSO-S
sizepop=6;         # The number of swarms.
c1=1.49;
c2=1.49;
w=0.9;
dw=(0.9-0.4)/gen;
V=matrix(sizepop,M);
trans_result=matrix(sizepop,201);
pop=matrix(sizepop,M);
for(ii=1:sizepop)
{   
    pop(ii,:)=popcen+round(70*(1-2*randmatrix(1,M)));	# Initialize the position of particles in CPSO-S swarm.
    V(ii,:)=vmax*(1-2*randmatrix(1,M)); # Initialize the velocity of particles in CPSO-S swarm.
}
fitness=matrix(1,sizepop);
for(ii=1:sizepop)
{
    ?ii;
    del('d.txt');
    d=[pop(ii,1:M),pop(ii,M-1:-1:1)];
    d=[d,d];    
    write('d.txt',num2str(d));
    switchtolayout;    
    select('structure group');    
    runsetup;
    select('mesh');
    set('x min',-(sum(d)*1e-9));
    run;
    temp=getresult('transmission','T');
    trans_result(ii,:)=-pinch(temp.T);
    fitness(1,ii)=sum(abs(tar-trans_result(ii,1:201)),2);
}
matlabput(fitness);
matlab("
    [bestf,besti]=min(fitness);
");
matlabget(bestf,besti);
pbest=pop;
gbest=pop(besti,:);
gbest1=gbest;
gbest2=gbest;
fitnesspbest=fitness;
fitnessgbest=bestf;
# initialize the swarm of PSO
s_c1=1.2;
s_c2=1.2;
s_sizepop=20;
s_w=0.9;
dw=(0.9-0.4)/gen;
s_V=matrix(s_sizepop,M);
s_trans_result=matrix(s_sizepop,201);
s_pop=matrix(s_sizepop,M);
for(ii=1:s_sizepop)
{   
    s_pop(ii,:)=popcen+round(70*(1-2*randmatrix(1,M)));	#Initialize the position of PSO.
    s_V(ii,:)=vmax*(1-2*randmatrix(1,M));# Initialize the velocity of PSO.
}
s_fitness=matrix(1,s_sizepop);
for(ii=1:s_sizepop)
{
    ?ii;
    del('d.txt');
    d=[s_pop(ii,1:M),s_pop(ii,M-1:-1:1)];
    d=[d,d];    
    write('d.txt',num2str(d));
    switchtolayout;    
    select('structure group');    
    runsetup;
    select('mesh');
    set('x min',-(sum(d)*1e-9));
    run;
    temp=getresult('transmission','T');
    s_trans_result(ii,:)=-pinch(temp.T);
    s_fitness(1,ii)=sum(abs(tar-s_trans_result(ii,1:201)),2);
}
matlabput(s_fitness);
matlab("
    [bestf,besti]=min(s_fitness);
");
matlabget(bestf,besti);
s_pbest=s_pop;
s_gbest=s_pop(besti,:);
s_fitnesspbest=s_fitness;
s_fitnessgbest=bestf;
#The matrix trans_result_all stores the data of all particles in all swarm.
pop_all=matrix(s_sizepop+sizepop*M,M);
trans_result_all=matrix(s_sizepop+M*sizepop,201);
pbest_all=matrix(s_sizepop+M*sizepop,201);
fitnesspbest_all=matrix(1,s_sizepop+M*sizepop);
for(ii=1:s_sizepop)
{
    pop_all(ii,:)=s_pop(ii,:);
    trans_result_all(ii,:)=s_trans_result(ii,:);
    fitnesspbest_all(ii)=s_fitnesspbest(ii);
}
for(dd=1:M)
{
    for(ii=1:sizepop)
    {
        pop_all(s_sizepop+(dd-1)*sizepop+ii,:)=pop(ii,:);
        trans_result_all(s_sizepop+(dd-1)*sizepop+ii,:)=trans_result(ii,:);
        fitnesspbest_all(s_sizepop+(dd-1)*sizepop+ii)=fitnesspbest(ii);
    }
}
pbest_all=pop_all;

# main loop
for(ii=1:gen)
{
    ?ii;    
    #cpso-s    
    for(dd=1:M)
    {
        ?dd;        
        for(jj=1:sizepop)
        {
            V(jj,dd)=V(jj,dd)+c1*rand*(pbest(jj,dd)-pop(jj,dd))+c2*rand*(gbest(dd)-pop(jj,dd));
            if(V(jj,dd)>vmax(dd))
            {
                V(jj,dd)=vmax(dd);
            }
            if(V(jj,dd)<vmin(dd))
            {
                V(jj,dd)=vmin(dd);
            }
            pop(jj,dd)=round(pop(jj,dd)+V(jj,dd));
            if(pop(jj,dd)>popmax(dd))
            {
                pop(jj,dd)=popmax(dd);
            }
            if(pop(jj,dd)<popmin(dd))
            {
                pop(jj,dd)=popmin(dd);
            }
            
            #update pbest
            gbest1=gbest;
            gbest2=gbest;
            gbest1(dd)=pop(jj,dd);
            gbest2(dd)=pbest(jj,dd);
            #Replace dd-th element in gbest with pop(jj,dd) and evaluate the performance of pop(jj,dd) in gbest.
            del('d.txt');
            d=[gbest1(1,1:M),gbest1(1,M-1:-1:1)];
            d=[d,d];
            write('d.txt',num2str(d));
            switchtolayout;    
            select('structure group');    
            runsetup;
            select('mesh');
            set('x min',-(sum(d)*1e-9));
            run;
            temp=getresult('transmission','T');
            trans_result(jj,:)=-pinch(temp.T);
            fit1=sum(abs(tar-trans_result(jj,1:201)),2);
            #Replace dd-th element in gbest with pbest(jj,dd) and evaluate the performance of pbest(jj,dd) in gbest.
            del('d.txt');
            d=[gbest2(1,1:M),gbest2(1,M-1:-1:1)];
            d=[d,d];
            write('d.txt',num2str(d));
            switchtolayout;    
            select('structure group');    
            runsetup;
            select('mesh');
            set('x min',-(sum(d)*1e-9));
            run;
            temp=getresult('transmission','T');
            trans_result(jj,:)=-pinch(temp.T);
            trans_result_all(s_sizepop+(dd-1)*sizepop+jj,:)=-pinch(temp.T);
            fit2=sum(abs(tar-trans_result(jj,1:201)),2);
            if (fit1<fit2)# Compare the performance of pop(jj,dd) and pbest(jj,dd) in the gbest and choose the better one as the new pbest(jj,dd).
            {
                fitnesspbest(jj)=fit1;
                pbest(jj,dd)=pop(jj,dd);
            }
            else
            {
                fitnesspbest(jj)=fit2;
            }
            pop_all(s_sizepop+(dd-1)*sizepop+jj,:)=pop(jj,:);
            pbest_all(s_sizepop+(dd-1)*sizepop+jj,:)=pbest(jj,:);
            fitnesspbest_all(s_sizepop+(dd-1)*sizepop+jj)=fitnesspbest(jj);
           # update gbest
            
            if(fitnesspbest(jj)<fitnessgbest)
            {
                fitnessgbest=fitnesspbest(jj);
                gbest(dd)=pbest(jj,dd);
            } 
        }
    }
    w=w-dw;
    # Information interaction between CPSO-S swarms and PSO swarm.
    bool=1;
    matlabput(s_sizepop);
    matlab("
    randIndex=randi(round(s_sizepop/2));
    ");
    matlabget(randIndex);
    for(dd=1:M)
    {
        if(bool=1)
         {
             if(s_pop(randIndex,dd)~=s_gbest(dd))             
             {
                 bool=0;
                 randindex=randIndex;
             }
          }   
    }
    if(bool==1)
    {
          if(randIndex==round(s_sizepop/2)) {randIndex=randIndex-1;}
          else {randIndex=randIndex+1;}
     }      
    randindex=randIndex;
    s_pop(randindex,:)=gbest; #Choose one particle from PSO swarm randomly to be replace by the best particle in CPSO-S swarms.
    #Excute one iteration of PSO.
    for(jj=1:s_sizepop)
    {
        ?jj;        
        s_V(jj,:)=s_w*s_V(jj,:)+s_c1*randmatrix(1,M)*(s_pbest(jj,:)-s_pop(jj,:))+s_c2*randmatrix(1,M)*(s_gbest-s_pop(jj,:));     	# Update the velocity.
        for(dd=1:M)
        {
            if(s_V(jj,dd)>vmax(dd))
            {
                s_V(jj,dd)=vmax(dd);
            }
            if(s_V(jj,dd)<vmin(dd))
            {
                s_V(jj,dd)=vmin(dd);
            }
        }
        s_pop(jj,:)=round(s_pop(jj,:)+s_V(jj,:));
        for(dd=1:M)
        {
            if(s_pop(jj,dd)>popmax(dd))
            {
                s_pop(jj,dd)=popmax(dd);
            }
            if(s_pop(jj,dd)<popmin(dd))
            {
                s_pop(jj,dd)=popmin(dd);
            }
        }
        pop_all(jj,:)=s_pop(jj,:);
        pbest_all(jj,:)=s_pbest(jj,:);
        fitnesspbest_all(jj)=s_fitnesspbest(jj);
        
        del('d.txt');
        d=[s_pop(jj,1:M),s_pop(jj,M-1:-1:1)];
        d=[d,d];    
        write('d.txt',num2str(d));
        switchtolayout;    
        select('structure group');    
        runsetup;
        select('mesh');
        set('x min',-(sum(d)*1e-9));
        run;
        temp=getresult('transmission','T');
        s_trans_result(jj,:)=-pinch(temp.T);
        trans_result_all(jj,:)=-pinch(temp.T);
        s_fitness(1,jj)=sum(abs(tar-s_trans_result(jj,1:201)),2);
        if(s_fitness(jj)<s_fitnesspbest(jj))
        {
            s_fitnesspbest(jj)=s_fitness(jj);
            s_pbest(jj,:)=s_pop(jj,:);
        }
        if(s_fitnesspbest(jj)<s_fitnessgbest)
        {
            s_fitnessgbest=s_fitnesspbest(jj);
            s_gbest=s_pbest(jj,:);
        }
    }
    # Information interaction between PSO swarm and CPSO-S swarms.
    for(dd=1:M)
    {
        matlabput(sizepop);
        matlab("
        randIndex=randi(round(sizepop/2));
        ");
        matlabget(randIndex);
        if(pop(randIndex,dd)==gbest(dd)) 
        {
	if (randIndex==1)
	{
	      randIndex=2;
	}
	else
	{
	      randIndex=randIndex-1;
	}
        }
       randindex=randIndex;
        pop(randindex,dd)=s_gbest(dd); # Choose a particle from CPSO-S swarms for each dimension to be replaced by corresponding dimension in the best particle of PSO.
    }
    if (fitnessgbest<s_fitnessgbest)
    {
        FITNESSGLOBALBEST=fitnessgbest;
        GLOBALBEST=gbest;
    }
    else
    {
        FITNESSGLOBALBEST=s_fitnessgbest;
        GLOBALBEST=s_gbest;
    }
    s_w=s_w-dw;
    
    result(ii)=FITNESSGLOBALBEST;		
    matlabsave('pso-result'+num2str(ii),pbest,pbest_all,gbest,s_pbest,s_gbest,V,s_V,fitnessgbest,s_fitnessgbest,ii,fitnesspbest,s_fitnesspbest,fitnesspbest_all,trans_result_all,pop,s_pop,pop_all,FITNESSGLOBALBEST,GLOBALBEST,V,s_V,result);  
}
matlabsave('result',result,FITNESSGLOBALBEST);
    
#ndpso-1
#7层镜像结构的pso优化
gen=200;             #迭代次数
sizepop=50;         #种群规模
tar=readdata('data_double_peak.txt'); #目标函数值
popcen=[80,80,80,80,80];
popmin=[15,15,15,15,15];         
popmax=[150,150,150,150,150]; 
vmax=0.2*(popmax-popmin);
vmin=-1*vmax;
M=5;
tran_p=0.9;
neighborsize=5;
F=0.5;
CR=0.9;
dF=(1-0.5)/gen;
dCR=(0.4-0.9)/gen;

pop=matrix(sizepop,M);
v=matrix(sizepop,M);
trans_result=matrix(sizepop,201);
meandistance=matrix(1,sizepop);
evfactor=matrix(1,sizepop);
u=matrix(1,M);
distance=matrix(1,sizepop);
neighborindex=matrix(sizepop,sizepop);
gneighborindex=matrix(1,sizepop);
status=matrix(1,sizepop);
fitness=matrix(1,sizepop);
fitnesspbest=matrix(1,sizepop);
pbest=matrix(sizepop,M);
pbest2=matrix(1,M);
gbest2=matrix(1,M);
result=matrix(1,gen);

for(ii=1:sizepop)
{
    pop(ii,:)=popcen+round(70*(1-2*randmatrix(1,M)));	#种群初始化
    v(ii,:)=vmax*(1-2*randmatrix(1,M));
}
for(ii=1:sizepop)
{
    ?ii;
    del('d.txt');
    d=[pop(ii,1:M),pop(ii,M-1:-1:1)];
    d=[d,d];    
    write('d.txt',num2str(d));
    switchtolayout;    
    select('structure group');    
    runsetup;
    select('mesh');
    set('x min',-(sum(d)*1e-9));
    run;
    temp=getresult('transmission','T');
    trans_result(ii,:)=-pinch(temp.T);
    fitness(1,ii)=sum(abs(tar-trans_result(ii,1:201)),2);
}
pbest=pop;
fitnesspbest=fitness;
matlabput(fitnesspbest);
matlab("
    [bestf,besti]=min(fitnesspbest);
");
matlabget(bestf,besti);
fitnessgbest=bestf;
gbest=pop(besti,:);

for(ii=1:gen)
{
    
    ?ii;
    #计算适应度    
    for(jj=1:sizepop)
    {
        del('d.txt');
        d=[pop(jj,1:M),pop(jj,M-1:-1:1)];
        d=[d,d];    
        write('d.txt',num2str(d));
        switchtolayout;    
        select('structure group');    
        runsetup;
        select('mesh');
        set('x min',-(sum(d)*1e-9));
        run;
        temp=getresult('transmission','T');
        trans_result(jj,:)=-pinch(temp.T);
        fitness(1,jj)=sum(abs(tar-trans_result(jj,1:201)),2);
        if (fitness(1,jj)<fitnesspbest(1,jj))
        {
            fitnesspbest(1,jj)=fitness(1,jj);
            pbest(jj,:)=pop(jj,:);
        }
        if (fitnesspbest(1,jj)<fitnessgbest)
        {
            fitnessgbest=fitnesspbest(1,jj);
            gbest=pbest(jj,:);
        }
    }
    #计算mean distance
    for (jj=1:sizepop)
    {
        dist=0;
        for(kk=1:sizepop)
        {
            x1=pop(kk,:);
            x2=pop(jj,:);
            matlabput(x1,x2);
            matlab("
            norm1=norm(x1-x2);
            ");
            matlabget(norm1);
            dist=dist+norm1;
        }
        meandistance(jj)=dist/(sizepop-1);
    }
    #计算evolutionary factor和当前状态
    matlabput(meandistance);
    matlab("
    distancemin=min(meandistance);
    distancemax=max(meandistance);    
    ");
    matlabget(distancemin,distancemax);
    distancemin=distancemin;
    distancemax=distancemax;
    for(jj=1:sizepop)
    {
        evfactor(jj)=(meandistance(jj)-distancemin)/(distancemax-distancemin);
        if(evfactor(jj)<0.25)
        {
            status(jj)=1;
        }
        else if(evfactor(jj)<0.5)
        {
            status(jj)=2;
        }
        else if(evfactor(jj)<0.75)
        {
            status(jj)=3;
        }
        else
        {
            status(jj)=4;
        }
    }
    #DE算法生成更好的pbest和gbest
    for(jj=1:sizepop)
    {
        for(dd=1:M)
        {
            matlabput(sizepop);
            matlab("
            r1=randi(sizepop);
            r2=randi(sizepop);           
            ");
            matlabget(r1,r2);
            r111=r1;
            r222=r2;
            r33=rand;
            u(dd)=round(pbest(jj,dd)+F*(pbest(r111,dd)-pbest(r222,dd)));
            if(u(dd)<popmin(dd))
            {
                u(dd)=popmin(dd);
            }
            if(u(dd)>popmax(dd))
            {
                u(dd)=popmax(dd);
            }
            if(r33<CR)
            {
                u(dd)=pbest(jj,dd);
            }
        }
        del('d.txt');
        d=[u(1,1:M),u(1,M-1:-1:1)];
        d=[d,d];    
        write('d.txt',num2str(d));
        switchtolayout;    
        select('structure group');    
        runsetup;
        select('mesh');
        set('x min',-(sum(d)*1e-9));
        run;
        temp=getresult('transmission','T');
        trans_result(jj,:)=-pinch(temp.T);
        fitness_u=sum(abs(tar-trans_result(jj,1:201)),2);
        if(fitness_u<fitnesspbest(jj))
        {
            pbest(jj,:)=u;
            fitnesspbest(jj)=fitness_u;
        }
        if(fitness_u<fitnessgbest)
        {
            gbest=u;
            fitnessgbest=fitness_u;
        }
    }
    #计算每个粒子的动态邻居和gbest的动态邻居
    for(jj=1:sizepop)
    {
        for(kk=1:sizepop)
        {
            x1=pbest(jj,:);
            x2=pbest(kk,:);            
            matlabput(x1,x2);
            matlab("
            dist=norm(x1-x2);
            ");
            matlabget(dist);
            distance(kk)=dist;
        }
        matlabput(distance);
        matlab("
        [distance2,sortindex]=sort(distance,2);        
        ");
        matlabget(sortindex);
        neighborindex(jj,:)=sortindex;
    }
    for(kk=1:sizepop)
    {
        x1=gbest;
        x2=pbest(kk,:);
        matlabput(x1,x2);
        matlab("
        dist=norm(x1-x2);        
        ");
        matlabget(dist);
        distance(kk)=dist;
    }
    matlabput(distance);
    matlab("
    [distance2,sortindex]=sort(distance,2);
    ");
    matlabget(sortindex);
    gneighborindex=sortindex;
    #更新状态
    for(jj=1:sizepop)
    {
        rr=rand;
        if(status(jj)==1)
        {
            if(rr>tran_p)
            {
                status(jj)=2;
            }
        }
        else if(status(jj)==2)
        {
            if(rr<(1-tran_p)/2)
            {
                status(jj)=1;
            }
            else if(rr>(1+tran_p)/2)
            {
                status(jj)=3;
            }
        }
        else if(status(jj)==3)
        {
            if(rr<(1-tran_p)/2)
            {
                status(jj)=2;
            }
            else if(rr>(1+tran_p)/2)
            {
                status(jj)=4;
            }
        }
        else
        {
            if(rr<(1-tran_p))
            {
                status(jj)=3;
            }
        }
    }
    #更新惯性指数
    w=0.5*evfactor+0.4;
    #根据状态更新c1、c2和学习对象
    for(jj=1:sizepop)
    {
        if(status(jj)==1)
        {
            c1=2;
            c2=2;
            for(dd=1:M)
            {
                pbest2(dd)=pbest(jj,dd);
                gbest2(dd)=gbest(dd);
            } 
        }
        else if(status(jj)==2)
        {
            c1=2.1;
            c2=1.9;
            matlabput(sizepop,neighborsize);
            matlab("
            r1=randi(sizepop);
            r2=randi(neighborsize);            
            ");
            matlabget(r1,r2);
            r111=r1;
            r222=r2;
            index=neighborindex(r111,r222);
            for(dd=1:M)
            {
                pbest2(dd)=pbest(index,dd);
                gbest2(dd)=gbest(dd);
            }
        }
        else if(status(jj)==3)
        {
            c1=2.2;
            c2=1.8;
            matlabput(neighborsize);
            matlab("
            r3=randi(neighborsize);            
            ");
            matlabget(r3);
            r333=r3;
            index=gneighborindex(r333);
            for(dd=1:M)
            {
                pbest2(dd)=pbest(jj,dd);
                gbest2(dd)=pbest(index,dd);
            }
        }
        else
        {
            c1=1.8;
            c2=2.2;
            matlabput(sizepop,neighborsize);
            matlab("
            r1=randi(sizepop);
            r2=randi(neighborsize);
            r3=randi(neighborsize);        
            ");
            matlabget(r1,r2,r3);
            r111=r1;
            r222=r2;
            r333=r3;
            index1=neighborindex(r111,r222);
            index2=gneighborindex(r333);
            for(dd=1:M)
            {
                pbest2(dd)=pbest(index1,dd);
                gbest2(dd)=pbest(index2,dd);
            }
        }
        for(dd=1:M)
        {
            r11=rand;
            r22=rand;
            v(jj,dd)=w(jj)*v(jj,dd)+c1*r11*(pbest2(dd)-pop(jj,dd))+c2*r22*(gbest2(dd)-pop(jj,dd));
            if(v(jj,dd)<vmin(dd))
            {
                v(jj,dd)=vmin(dd); 
            }
            if(v(jj,dd)>vmax(dd))
            {
                v(jj,dd)=vmax(dd);
            }
            pop(jj,dd)=round(pop(jj,dd)+v(jj,dd));
            if(pop(jj,dd)<popmin(dd))
            {
                pop(jj,dd)=popmin(dd);
            }
            if(pop(jj,dd)>popmax(dd))
            {
                pop(jj,dd)=popmax(dd);
            }
        }
    }
    result(ii)=fitnessgbest;		#保存每一代最佳
    matlabsave('pso-result'+num2str(ii),pbest,gbest,v,fitnessgbest,ii,fitnesspbest,trans_result,pop,result);
}

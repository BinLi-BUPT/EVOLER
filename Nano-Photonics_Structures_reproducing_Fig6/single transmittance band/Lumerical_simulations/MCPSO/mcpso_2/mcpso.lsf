#mcpso-1
c1=2.05;
c2=2.05;
c3=2.0;
groupnum=5;
sizepop=10;
gen=200;
w=0.9;
dw=(0.9-0.4)/gen;
tar=readdata('data_single_peak.txt'); #目标函数值
popcen=[80,80,80,80,80];
popmin=[15,15,15,15,15];         
popmax=[150,150,150,150,150]; 
M=5;                #变量数   
Vmax=0.2*(popmax-popmin);
Vmin=-1*Vmax;
result=matrix(1,gen);
V=matrix(groupnum,sizepop,M);
trans_result=matrix(groupnum,sizepop,201);
pop=matrix(groupnum,sizepop,M);
#初始化
for(ii=1:groupnum)
{
    for(jj=1:sizepop)
    {
        pop(ii,jj,:)=popcen+round(70*(1-2*randmatrix(1,M)));	#种群初始化
        V(ii,jj,:)=Vmax*(1-2*randmatrix(1,M));#速度初始化
    }
}
fitness=matrix(groupnum,sizepop);
d=matrix(1,4*M-2);
trans_r=matrix(1,201);
for(ii=1:groupnum)
{
    for(jj=1:sizepop)
    {
        ?ii;
        ?jj;
        del('d.txt');
        d(1,1:M)=pop(ii,jj,1:M);
        d(1,M+1:2*M-1)=pop(ii,jj,M-1:-1:1);
        d(1,2*M:3*M-1)=pop(ii,jj,1:M);
        d(1,3*M:4*M-2)=pop(ii,jj,M-1:-1:1);
        #d=[pop(ii,jj,1:M),pop(ii,jj,M-1:-1:1)];
        #d=[d,d];    
        write('d.txt',num2str(d));
        switchtolayout;    
        select('structure group');    
        runsetup;
        select('mesh');
        set('x min',-(sum(d)*1e-9));
        run;
        temp=getresult('transmission','T');
        trans_result(ii,jj,:)=-pinch(temp.T);
        for(pp=1:201)
        {
            trans_r(1,pp)=trans_result(ii,jj,pp);
        }
        fitness(ii,jj)=sum(abs(tar-trans_r),2);
    }
}
gbestind=matrix(groupnum);
pbest=matrix(groupnum,sizepop,M);
pbestfitness=matrix(groupnum,sizepop);
gbest=matrix(groupnum,M);
gbestfitness=matrix(1,groupnum);
slavebest=matrix(1,M);
GLOBALBEST=matrix(1,M);
pbest=pop;
pbestfitness=fitness;
for(ii=1:groupnum)
{
    matlabput(fitness,ii);
    matlab("
    [bestf,besti]=min(fitness(ii,:));
    ");
    matlabget(bestf,besti);
    gbest(ii,:)=pop(ii,besti,:);
    gbestfitness(ii)=bestf;
}
matlabput(gbestfitness);
matlab("
[bestf,besti]=min(gbestfitness);
");
matlabget(bestf,besti);
GLOBALBEST=gbest(besti,:);
GLOBALBESTFITNESS=bestf;
PBESTFITNESS=matrix(1,groupnum*sizepop);
#大循环
gb=matrix(1,1,M);
for(ii=1:gen)
{
    for(jj=1:groupnum-1)
    {   
        for(kk=1:sizepop)#每个种群内独立迭代
        {
            ?ii;
            ?jj; 
            ?kk;
            for(dd=1:M)
            {              
                gb(1,1,dd)= gbest(jj,dd);
            }         
            V(jj,kk,:)=w*V(jj,kk,:)+c1*rand*(pbest(jj,kk,:)-pop(jj,kk,:))+c2*rand*(gb(1,1,:)-pop(jj,kk,:));
            for(dd=1:M)
            {
                if(V(jj,kk,dd)>Vmax(dd))
                {
                    V(jj,kk,dd)=Vmax(dd);
                }
                if(V(jj,kk,dd)<Vmin(dd))
                {
                   V(jj,kk,dd)=Vmin(dd);
                }
            }
            pop(jj,kk,:)=round(pop(jj,kk,:)+V(jj,kk,:));#更新种群 
            for(dd=1:M)
            {
                if(pop(jj,kk,dd)>popmax(dd))
                {
                    pop(jj,kk,dd)=popmax(dd);
                }
                if(pop(jj,kk,dd)<popmin(dd))
                {
                    pop(jj,kk,dd)=popmin(dd);
                }
            }
            del('d.txt');
            d(1,1:M)=pop(jj,kk,1:M);
            d(1,M+1:2*M-1)=pop(jj,kk,M-1:-1:1);
            d(1,2*M:3*M-1)=pop(jj,kk,1:M);
            d(1,3*M:4*M-2)=pop(jj,kk,M-1:-1:1);
            write('d.txt',num2str(d));
            switchtolayout;    
            select('structure group');    
            runsetup;
            select('mesh');
            set('x min',-(sum(d)*1e-9));
            run;
            temp=getresult('transmission','T');
            trans_result(jj,kk,:)=-pinch(temp.T);
            for(pp=1:201)
            {
                trans_r(1,pp)=trans_result(jj,kk,pp);
            }
            fitness(jj,kk)=sum(abs(tar-trans_r),2);
            if(fitness(jj,kk)<pbestfitness(jj,kk))
            {
                pbest(jj,kk,:)=pop(jj,kk,:);
                pbestfitness(jj,kk)=fitness(jj,kk);
            }
            if(pbestfitness(jj,kk)<gbestfitness(jj))
            {
                gbest(jj,:)=pbest(jj,kk,:);
                gbestfitness(jj)=pbestfitness(jj,kk);
            }
        }      
    }
    #找到奴隶群体最优位置与最优适应度
    matlabput(gbestfitness,groupnum);
    matlab("
    [bestf,besti]=min(gbestfitness(1:(groupnum-1)));
    ");
    matlabget(bestf,besti);
    slavebest=gbest(besti,:);
    slavebestfitness=bestf;
    sb=matrix(1,1,M);
    #更新主群体
    if (slavebestfitness>gbestfitness(groupnum))
    {
        phi1=1;
        phi2=0;
    }
    if(slavebestfitness==gbestfitness(groupnum))
    {
        phi1=0.5;
        phi2=0.5;
    }
    if(slavebestfitness<gbestfitness(groupnum))
    {
        phi1=0;
        phi2=1;
    }
    for(kk=1:sizepop)
    {
        
        for(dd=1:M)
        {              
            gb(1,1,dd)= gbest(groupnum,dd);
        } 
        for(dd=1:M)
        {
            sb(1,1,dd)=slavebest(1,dd);
        }
        V(groupnum,kk,:)=w*V(groupnum,kk,:)+c1*rand*(pbest(groupnum,kk,:)-pop(groupnum,kk,:))+c2*rand*phi1*(gb(1,1,:)-pop(groupnum,kk,:))+c3*rand*phi2*(sb(1,1,:)-pop(groupnum,kk,:));
        for(dd=1:M)
        {
            if(V(groupnum,kk,dd)>Vmax(dd))
            {
                V(groupnum,kk,dd)=Vmax(dd);
            }
            if(V(groupnum,kk,dd)<Vmin(dd))
            {
                V(groupnum,kk,dd)=Vmin(dd);
            }
        }
        pop(groupnum,kk,:)=round(pop(groupnum,kk,:)+V(groupnum,kk,:));
        for(dd=1:M)
        {
            if(pop(groupnum,kk,dd)>popmax(dd))
            {
                pop(groupnum,kk,dd)=popmax(dd);
            }
            if(pop(groupnum,kk,dd)<popmin(dd))
            {
                pop(groupnum,kk,dd)=popmin(dd);
            }            
        }
        del('d.txt');
        d(1,1:M)=pop(groupnum,kk,1:M);
        d(1,M+1:2*M-1)=pop(groupnum,kk,M-1:-1:1);
        d(1,2*M:3*M-1)=pop(groupnum,kk,1:M);
        d(1,3*M:4*M-2)=pop(groupnum,kk,M-1:-1:1); 
        write('d.txt',num2str(d));
        switchtolayout;    
        select('structure group');    
        runsetup;
        select('mesh');
        set('x min',-(sum(d)*1e-9));
        run;
        temp=getresult('transmission','T');
        trans_result(groupnum,kk,:)=-pinch(temp.T);
        for(pp=1:201)
        {
            trans_r(1,pp)=trans_result(groupnum,kk,pp);
        }
        fitness(groupnum,kk)=sum(abs(tar-trans_r),2);
        if (fitness(groupnum,kk)<pbestfitness(groupnum,kk))
        {
            pbest(groupnum,kk,:)=pop(groupnum,kk,:);
            pbestfitness(groupnum,kk)=fitness(groupnum,kk);
        }
        if(pbestfitness(groupnum,kk)<gbestfitness(groupnum))
        {
            gbest(groupnum,:)=pbest(groupnum,kk,:);
            gbestfitness(groupnum)=pbestfitness(groupnum,kk);
        }
    }
    #更新全局最优
    matlabput(gbestfitness);
    matlab("
    [bestf,besti]=min(gbestfitness);
    ");
    matlabget(bestf,besti);
    GLOBALBESTFITNESS=bestf;
    GLOBALBEST=gbest(besti,:);
    result(ii)=GLOBALBESTFITNESS;		#保存每一代最佳
    matlabsave('pso-result'+num2str(ii),pbest,gbest,GLOBALBEST,V,pbestfitness,gbestfitness,GLOBALBESTFITNESS,ii,trans_result,pop,result);
    w=w-dw;
}
matlabsave('result',result,gbest);

